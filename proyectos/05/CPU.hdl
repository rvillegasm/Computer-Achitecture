// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /**
     *  i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
       15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
                                      A  D  M  
                                             JLT JEQ JGT
     */

    // op code 0 -> a instruction
    // op code 1 -> c instruction
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outAorC);

    // A REGISTER AND A INSTRUCTION
    // -----------------------------------------------------------------------------------
    Not(in=instruction[15], out=opA);
    // if a instruction, or c instruction with a destination to A, load A
    Or(a=opA, b=instruction[5], out=loadA);
    ARegister(in=outAorC, load=loadA, out=outRegA, out[0..14]=addressM);

    // D REGISTER AND C INSTRUCTION
    // -----------------------------------------------------------------------------------
    // if c instruction and a-bit is 1, access memory, else access A
    And(a=instruction[15], b=instruction[12], out=switchAM);
    Mux16(a=outRegA, b=inM, sel=switchAM, out=outAM);

    // if c instruction and the destination is D, load D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outRegD);

    // ALU
    // -----------------------------------------------------------------------------------
    ALU(x=outRegD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=outZr, ng=outNg);

    // WRITE TO MEMORY INSTEAD OF REGISTERS
    // -----------------------------------------------------------------------------------
    // if c instruction and destination is M, write to MEMORY
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // PROGRAM COUNTER
    // ------------------------------------------------------------------------------------
    // if c instruciton and comparing with JGT
    Not(in=outNg, out=positive);
    Not(in=outZr, out=notZero);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=positive, b=notZero, out=positiveAndNotZero);
    // evaluate condition
    And(a=jgt, b=positiveAndNotZero, out=jump1);

    // if c instruction and comparing JEQ
    And(a=instruction[15], b=instruction[1], out=jeq);
    // evaluate condition
    And(a=jeq, b=outZr, out=jump2);

    // if c instruction and comparing JLT
    And(a=instruction[15], b=instruction[2], out=jlt);
    // evaluate condition
    And(a=jlt, b=outNg, out=jump3);

    // If any condition meets, JUMP
    Or(a=jump1, b=jump2, out=jumpAux);
    Or(a=jumpAux, b=jump3, out=loadJump);

    PC(in=outRegA, load=loadJump, inc=true, reset=reset, out[0..14]=pc);

}