# Generated from JackGrammar.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u0134\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3")
        buf.write("\7\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\6*\u0101")
        buf.write("\n*\r*\16*\u0102\3+\3+\7+\u0107\n+\f+\16+\u010a\13+\3")
        buf.write("+\3+\3,\3,\7,\u0110\n,\f,\16,\u0113\13,\3-\6-\u0116\n")
        buf.write("-\r-\16-\u0117\3-\3-\3.\3.\3.\3.\7.\u0120\n.\f.\16.\u0123")
        buf.write("\13.\3.\3.\3/\3/\3/\3/\7/\u012b\n/\f/\16/\u012e\13/\3")
        buf.write("/\3/\3/\3/\3/\3\u012c\2\60\3\3\5\4\7\5\t\6\13\7\r\b\17")
        buf.write("\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36")
        buf.write(";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60\3\2\b\3\2\62")
        buf.write(";\4\2\f\f$$\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"")
        buf.write("\"\4\2\f\f\17\17\2\u0139\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3")
        buf.write("\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2")
        buf.write("\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2")
        buf.write("\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2")
        buf.write("!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2")
        buf.write("\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3")
        buf.write("\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2")
        buf.write("\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2")
        buf.write("\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2")
        buf.write("\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3")
        buf.write("\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3_\3\2\2\2\5e\3\2\2\2\7g")
        buf.write("\3\2\2\2\ti\3\2\2\2\13p\3\2\2\2\rv\3\2\2\2\17x\3\2\2\2")
        buf.write("\21z\3\2\2\2\23~\3\2\2\2\25\u0083\3\2\2\2\27\u008b\3\2")
        buf.write("\2\2\31\u0097\3\2\2\2\33\u00a0\3\2\2\2\35\u00a7\3\2\2")
        buf.write("\2\37\u00ac\3\2\2\2!\u00ae\3\2\2\2#\u00b0\3\2\2\2%\u00b4")
        buf.write("\3\2\2\2\'\u00b8\3\2\2\2)\u00ba\3\2\2\2+\u00bc\3\2\2\2")
        buf.write("-\u00be\3\2\2\2/\u00c1\3\2\2\2\61\u00c6\3\2\2\2\63\u00cc")
        buf.write("\3\2\2\2\65\u00cf\3\2\2\2\67\u00d6\3\2\2\29\u00d8\3\2")
        buf.write("\2\2;\u00da\3\2\2\2=\u00dc\3\2\2\2?\u00de\3\2\2\2A\u00e0")
        buf.write("\3\2\2\2C\u00e2\3\2\2\2E\u00e4\3\2\2\2G\u00e6\3\2\2\2")
        buf.write("I\u00e8\3\2\2\2K\u00ea\3\2\2\2M\u00ef\3\2\2\2O\u00f5\3")
        buf.write("\2\2\2Q\u00fa\3\2\2\2S\u0100\3\2\2\2U\u0104\3\2\2\2W\u010d")
        buf.write("\3\2\2\2Y\u0115\3\2\2\2[\u011b\3\2\2\2]\u0126\3\2\2\2")
        buf.write("_`\7e\2\2`a\7n\2\2ab\7c\2\2bc\7u\2\2cd\7u\2\2d\4\3\2\2")
        buf.write("\2ef\7}\2\2f\6\3\2\2\2gh\7\177\2\2h\b\3\2\2\2ij\7u\2\2")
        buf.write("jk\7v\2\2kl\7c\2\2lm\7v\2\2mn\7k\2\2no\7e\2\2o\n\3\2\2")
        buf.write("\2pq\7h\2\2qr\7k\2\2rs\7g\2\2st\7n\2\2tu\7f\2\2u\f\3\2")
        buf.write("\2\2vw\7.\2\2w\16\3\2\2\2xy\7=\2\2y\20\3\2\2\2z{\7k\2")
        buf.write("\2{|\7p\2\2|}\7v\2\2}\22\3\2\2\2~\177\7e\2\2\177\u0080")
        buf.write("\7j\2\2\u0080\u0081\7c\2\2\u0081\u0082\7t\2\2\u0082\24")
        buf.write("\3\2\2\2\u0083\u0084\7d\2\2\u0084\u0085\7q\2\2\u0085\u0086")
        buf.write("\7q\2\2\u0086\u0087\7n\2\2\u0087\u0088\7g\2\2\u0088\u0089")
        buf.write("\7c\2\2\u0089\u008a\7p\2\2\u008a\26\3\2\2\2\u008b\u008c")
        buf.write("\7e\2\2\u008c\u008d\7q\2\2\u008d\u008e\7p\2\2\u008e\u008f")
        buf.write("\7u\2\2\u008f\u0090\7v\2\2\u0090\u0091\7t\2\2\u0091\u0092")
        buf.write("\7w\2\2\u0092\u0093\7e\2\2\u0093\u0094\7v\2\2\u0094\u0095")
        buf.write("\7q\2\2\u0095\u0096\7t\2\2\u0096\30\3\2\2\2\u0097\u0098")
        buf.write("\7h\2\2\u0098\u0099\7w\2\2\u0099\u009a\7p\2\2\u009a\u009b")
        buf.write("\7e\2\2\u009b\u009c\7v\2\2\u009c\u009d\7k\2\2\u009d\u009e")
        buf.write("\7q\2\2\u009e\u009f\7p\2\2\u009f\32\3\2\2\2\u00a0\u00a1")
        buf.write("\7o\2\2\u00a1\u00a2\7g\2\2\u00a2\u00a3\7v\2\2\u00a3\u00a4")
        buf.write("\7j\2\2\u00a4\u00a5\7q\2\2\u00a5\u00a6\7f\2\2\u00a6\34")
        buf.write("\3\2\2\2\u00a7\u00a8\7x\2\2\u00a8\u00a9\7q\2\2\u00a9\u00aa")
        buf.write("\7k\2\2\u00aa\u00ab\7f\2\2\u00ab\36\3\2\2\2\u00ac\u00ad")
        buf.write("\7*\2\2\u00ad \3\2\2\2\u00ae\u00af\7+\2\2\u00af\"\3\2")
        buf.write("\2\2\u00b0\u00b1\7x\2\2\u00b1\u00b2\7c\2\2\u00b2\u00b3")
        buf.write("\7t\2\2\u00b3$\3\2\2\2\u00b4\u00b5\7n\2\2\u00b5\u00b6")
        buf.write("\7g\2\2\u00b6\u00b7\7v\2\2\u00b7&\3\2\2\2\u00b8\u00b9")
        buf.write("\7]\2\2\u00b9(\3\2\2\2\u00ba\u00bb\7_\2\2\u00bb*\3\2\2")
        buf.write("\2\u00bc\u00bd\7?\2\2\u00bd,\3\2\2\2\u00be\u00bf\7k\2")
        buf.write("\2\u00bf\u00c0\7h\2\2\u00c0.\3\2\2\2\u00c1\u00c2\7g\2")
        buf.write("\2\u00c2\u00c3\7n\2\2\u00c3\u00c4\7u\2\2\u00c4\u00c5\7")
        buf.write("g\2\2\u00c5\60\3\2\2\2\u00c6\u00c7\7y\2\2\u00c7\u00c8")
        buf.write("\7j\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7n\2\2\u00ca\u00cb")
        buf.write("\7g\2\2\u00cb\62\3\2\2\2\u00cc\u00cd\7f\2\2\u00cd\u00ce")
        buf.write("\7q\2\2\u00ce\64\3\2\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1")
        buf.write("\7g\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7w\2\2\u00d3\u00d4")
        buf.write("\7t\2\2\u00d4\u00d5\7p\2\2\u00d5\66\3\2\2\2\u00d6\u00d7")
        buf.write("\7\60\2\2\u00d78\3\2\2\2\u00d8\u00d9\7-\2\2\u00d9:\3\2")
        buf.write("\2\2\u00da\u00db\7/\2\2\u00db<\3\2\2\2\u00dc\u00dd\7,")
        buf.write("\2\2\u00dd>\3\2\2\2\u00de\u00df\7\61\2\2\u00df@\3\2\2")
        buf.write("\2\u00e0\u00e1\7(\2\2\u00e1B\3\2\2\2\u00e2\u00e3\7~\2")
        buf.write("\2\u00e3D\3\2\2\2\u00e4\u00e5\7>\2\2\u00e5F\3\2\2\2\u00e6")
        buf.write("\u00e7\7@\2\2\u00e7H\3\2\2\2\u00e8\u00e9\7\u0080\2\2\u00e9")
        buf.write("J\3\2\2\2\u00ea\u00eb\7v\2\2\u00eb\u00ec\7t\2\2\u00ec")
        buf.write("\u00ed\7w\2\2\u00ed\u00ee\7g\2\2\u00eeL\3\2\2\2\u00ef")
        buf.write("\u00f0\7h\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f2\7n\2\2\u00f2")
        buf.write("\u00f3\7u\2\2\u00f3\u00f4\7g\2\2\u00f4N\3\2\2\2\u00f5")
        buf.write("\u00f6\7p\2\2\u00f6\u00f7\7w\2\2\u00f7\u00f8\7n\2\2\u00f8")
        buf.write("\u00f9\7n\2\2\u00f9P\3\2\2\2\u00fa\u00fb\7v\2\2\u00fb")
        buf.write("\u00fc\7j\2\2\u00fc\u00fd\7k\2\2\u00fd\u00fe\7u\2\2\u00fe")
        buf.write("R\3\2\2\2\u00ff\u0101\t\2\2\2\u0100\u00ff\3\2\2\2\u0101")
        buf.write("\u0102\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2")
        buf.write("\u0103T\3\2\2\2\u0104\u0108\7$\2\2\u0105\u0107\n\3\2\2")
        buf.write("\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3")
        buf.write("\2\2\2\u0108\u0109\3\2\2\2\u0109\u010b\3\2\2\2\u010a\u0108")
        buf.write("\3\2\2\2\u010b\u010c\7$\2\2\u010cV\3\2\2\2\u010d\u0111")
        buf.write("\t\4\2\2\u010e\u0110\t\5\2\2\u010f\u010e\3\2\2\2\u0110")
        buf.write("\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2")
        buf.write("\u0112X\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0116\t\6\2")
        buf.write("\2\u0115\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u011a\b-\2\2\u011aZ\3\2\2\2\u011b\u011c\7\61\2\2\u011c")
        buf.write("\u011d\7\61\2\2\u011d\u0121\3\2\2\2\u011e\u0120\n\7\2")
        buf.write("\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123")
        buf.write("\u0121\3\2\2\2\u0124\u0125\b.\2\2\u0125\\\3\2\2\2\u0126")
        buf.write("\u0127\7\61\2\2\u0127\u0128\7,\2\2\u0128\u012c\3\2\2\2")
        buf.write("\u0129\u012b\13\2\2\2\u012a\u0129\3\2\2\2\u012b\u012e")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012c\u012a\3\2\2\2\u012d")
        buf.write("\u012f\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u0130\7,\2\2")
        buf.write("\u0130\u0131\7\61\2\2\u0131\u0132\3\2\2\2\u0132\u0133")
        buf.write("\b/\2\2\u0133^\3\2\2\2\t\2\u0102\u0108\u0111\u0117\u0121")
        buf.write("\u012c\3\b\2\2")
        return buf.getvalue()


class JackGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    INTEGERCONSTANT = 41
    STRINGCONSTANT = 42
    IDENTIFIER = 43
    WHITESPACE = 44
    INLINECOMENT = 45
    DOCCOMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "'static'", "'field'", "','", "';'", 
            "'int'", "'char'", "'boolean'", "'constructor'", "'function'", 
            "'method'", "'void'", "'('", "')'", "'var'", "'let'", "'['", 
            "']'", "'='", "'if'", "'else'", "'while'", "'do'", "'return'", 
            "'.'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'<'", "'>'", 
            "'~'", "'true'", "'false'", "'null'", "'this'" ]

    symbolicNames = [ "<INVALID>",
            "INTEGERCONSTANT", "STRINGCONSTANT", "IDENTIFIER", "WHITESPACE", 
            "INLINECOMENT", "DOCCOMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "INTEGERCONSTANT", "STRINGCONSTANT", 
                  "IDENTIFIER", "WHITESPACE", "INLINECOMENT", "DOCCOMENT" ]

    grammarFileName = "JackGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


