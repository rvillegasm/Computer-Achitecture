"""
Main module of the Jack analizer compiler (analizer for now). 
It needs files generated by the ANTLR4 tool, so make sure you generate them before running this program.
"""

import os
import sys
import antlr4

from JackGrammarLexer import JackGrammarLexer
from JackGrammarParser import JackGrammarParser

from jack_listener import Listener
from jack_error_handler import ErrorHandler

def main(argv):
    """
    Main function of the jack compiler (analizer for now).

    It checks checks if the input is a directory or just a file, 
    and calls the analizer funtion according to said condition. 
    """
    if len(argv) != 2:
        bad_usage()

    if not os.path.isdir(argv[1]) and (len(argv) != 2 or argv[1][-5:] != ".jack"):
        bad_usage()

    if os.path.isdir(argv[1]):
        # initialize a list for all the jack files
        jack_files = []
        path = None
        # walk through the files in the specified directory
        for root, _, files in os.walk(argv[1]):
            path = root
            for f in files:
                if f.endswith(".jack"):
                    jack_files.append(f)
        # if no Jack files where found, throw usage error
        if len(jack_files) == 0:
            bad_usage()
        # analize every file
        for file in jack_files:
            analize(os.path.join(path, file))

    else:
        analize(argv[1])

def analize(file_path):
    """ 
    Function that analizes a single Jack source file and checks if it is correctly written.
    It also generates an XML file containing the tokens found in the file. 
    """
    out_file_path = file_path[:-5] + ".xml"

    input_stream = antlr4.FileStream(file_path)
    lexer = JackGrammarLexer(input_stream)
    token_stream = antlr4.CommonTokenStream(lexer)
    parser = JackGrammarParser(token_stream)
    # remove the built in error listeners and add the custom one
    parser.removeErrorListeners()
    parser.addErrorListener( ErrorHandler() )
    # create the tree
    try:
        tree = parser.classNT()
    except SyntaxError as se:
        print(se)
        sys.exit(-1)
    # create the listener
    listener = Listener(parser, "{}".format(out_file_path))
    antlr4.ParseTreeWalker.DEFAULT.walk(listener, tree)
    #print(tree.toStringTree(recog=parser))

def bad_usage():
    """ Funtion that manages a bad argument usage of the program, terminating it right away """
    print("Usage: python3 jack_analizer.py [<File Name>.jack | <Directory containing at least one .jack file>]")
    sys.exit(-1)

if __name__=='__main__':
    main(sys.argv)